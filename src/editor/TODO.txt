
/////////////////////////////////// PRINCIPE DE FONCTIONNEMENT ////////////////////////////////////
(Inspiré de Flux : http://facebook.github.io/react/docs/flux-overview.html)

Qt views ---> (commands) ----> ScriptEngine ---> (registered actions) ---> Application Model -----+
Ʌ                                                                                                 |
|                                                                                                 V
+---- (Qt views event handlers) <---- Event bus <---- (Application model emits "change" events) --+

Principes : 
    - Flux UNIdirectionnel
    - Les commandes passent par un chemin différent des évènements

///////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////// PRINCIPE DE FONCTIONNEMENT ////////////////////////////////////
//Principe :
    //Les actions sont le point d'entrée de l'utilisateur. 
    //Il peuvent être aussi le point d'entrée d'un mode console, d'un test ou d'un moteur de script.
    //Un mécanisme qui permet de faire le mapping entre l'action et un texte a été mis en place (ScriptEngine).
    //Le mapping texte -> action permet de :
    //   - faire du BDD
    //   - générer automatiquement des actions à partir d'un script
    //Le mapping action -> texte permet de :
    //   - Logger automatiquement les actions
    //   - Reproduire facilement l'éxécution d'un logiciel à partir de son log
    //   - Enregistrer un script (ou macro) en live dans le logiciel
///////////////////////////////////////////////////////////////////////////////////////////////////



- Faire une notification pour modifier les noms des ports d'entrée / sortie des ArrowItem
- Faire une notification pour modifier la classe d'un block

- Brancher la barre de recherche
    -> rechercher dans les blocs existant
    -> rechercher dans le repository des descriptions de blocks 
    -> rechercher dans les commandes et quand on clique sur une commande, proposer une fenêtre avec la commande ecrite et des cases à remplir à la place des arguments
    
- S'inspirer de ca pour l'UI : http://www.projexsoftware.com/wp-content/uploads/slider02.png

- Utiliser la Boost Graph Library pour implémenter les layout de graph : http://www.boost.org/doc/libs/1_55_0/libs/graph/doc/table_of_contents.html

- Utiliser les polices de caractères téléchargées

- BUG : quand on met un block dans la zone de gauche en dessous des notifications, on peut pas le resélectionner
- BUG : quand on déplace deux bloc connectés en dehors de la scène, l'arrow disparaît



//////// Bonne idées ////////////////////////////////////////////////////////////////////////////////////

- Faire un réseau de neurones en FBP ! : 
https://docs.google.com/a/google.com/viewer?url=www.google.com/about/datacenters/efficiency/internal/assets/machine-learning-applicationsfor-datacenter-optimization-finalv2.pdf

- Faire tourner le bouton menu du coin en bas à droite quand on clique dessus (animation)
